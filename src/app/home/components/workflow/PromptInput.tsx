"use client";

import { useState, useEffect, useRef } from "react";
import { ArrowRight, ChevronDown, FileText } from "lucide-react";
import { useDocument } from "@/contexts/document/context";
import { useDocumentQuery } from "@/contexts/promptContext";
import {
  DOCUMENT_TYPES,
  type DocumentType,
} from "@/contexts/document/constants";

// Example prompts you can customize
const examplePrompts = [
  "I need an NDA for my startup.",
  "Create an employment contract for a new hire.",
  "Draft a service agreement for my consulting business.",
  "Prepare a lease agreement for my rental property.",
];

export default function PromptInput() {
  const { state, actions } = useDocument();

  const { loadStoredQuery, clearDocumentQuery } = useDocumentQuery();
  const [input, setInput] = useState("");

  const [selectedDocumentType, setSelectedDocumentType] =
    useState<DocumentType>("general_contract");
  const [showDocumentTypeDropdown, setShowDocumentTypeDropdown] =
    useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Load stored query on mount
  useEffect(() => {
    const storedQuery = loadStoredQuery();
    if (storedQuery) {
      setInput(storedQuery);
      clearDocumentQuery(); // Clear after loading
    }
  }, [loadStoredQuery, clearDocumentQuery]);

  // Close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setShowDocumentTypeDropdown(false);
      }
    }

    if (showDocumentTypeDropdown) {
      document.addEventListener("mousedown", handleClickOutside);
      return () =>
        document.removeEventListener("mousedown", handleClickOutside);
    }
  }, [showDocumentTypeDropdown]);

  // Handle submit
  const handleSubmit = async () => {
    if (!input.trim() || state.loading) return;

    try {
      // Start document generation session with selected document type
      await actions.startSession(
        input.trim(),
        selectedDocumentType,
        "Generated Document" // Default title, could be generated by AI
      );

      // Clear input after successful submission
      setInput("");
    } catch (error) {
      console.error("Failed to start session:", error);
      // Error handling is managed by the document context
    }
  };

  // Support Ctrl+Enter submit
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && e.ctrlKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  // Insert example prompt on click
  const handleExampleClick = (ex: string) => setInput(ex);

  // Handle document type selection
  const handleDocumentTypeSelect = (documentType: DocumentType) => {
    setSelectedDocumentType(documentType);
    setShowDocumentTypeDropdown(false);
  };

  // Get the label for the selected document type
  const getSelectedDocumentTypeLabel = () => {
    const docType = DOCUMENT_TYPES.find(
      (doc) => doc.value === selectedDocumentType
    );
    return docType ? docType.label : "Select Document Type";
  };

  // Show error if there's one
  const showError = state.error && (
    <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
      <p className="text-red-700 text-sm">{state.error}</p>
    </div>
  );

  return (
    <div className="w-full max-w-xl flex flex-col items-center justify-center">
      <h1 className="text-3xl md:text-4xl font-bold text-center mb-2 mt-36 text-gray-900">
        What document do you need?
      </h1>
      <p className="text-center text-gray-500 mb-8 text-base">
        Share your scenario in your own words.
        <br />
        Being specific helps us deliver the best results for you.
      </p>

      {showError}

      <div className="relative w-full">
        <textarea
          className="w-full h-60 p-4 border border-gray-200 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent text-lg placeholder-gray-400 shadow-sm"
          placeholder="E.g., I need a Non-Disclosure Agreement for a new client project..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          disabled={state.loading}
          maxLength={2000}
          autoFocus
          spellCheck={true}
        />

        {/* Document Type Selector Button - Bottom Left */}
        <div className="absolute bottom-4 left-4" ref={dropdownRef}>
          <button
            type="button"
            onClick={() =>
              setShowDocumentTypeDropdown(!showDocumentTypeDropdown)
            }
            className="flex items-center gap-2 px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-gray-50 hover:border-gray-400 transition-colors shadow-sm"
            disabled={state.loading}
          >
            <FileText className="h-4 w-4" />
            <span className="max-w-32 truncate">
              {getSelectedDocumentTypeLabel()}
            </span>
            <ChevronDown className="h-4 w-4" />
          </button>

          {/* Document Type Dropdown */}
          {showDocumentTypeDropdown && (
            <div className="absolute bottom-full left-0 mb-2 w-64 max-h-60 bg-white border border-gray-200 rounded-lg shadow-lg overflow-y-auto z-10">
              <div className="p-2">
                <div className="text-xs font-semibold text-gray-500 uppercase tracking-wide mb-2 px-2">
                  Document Type
                </div>
                {DOCUMENT_TYPES.map((docType) => (
                  <button
                    key={docType.value}
                    type="button"
                    onClick={() => handleDocumentTypeSelect(docType.value)}
                    className={`w-full text-left px-3 py-2 rounded text-sm transition-colors ${
                      selectedDocumentType === docType.value
                        ? "bg-blue-50 text-blue-700 font-medium"
                        : "text-gray-700 hover:bg-gray-50"
                    }`}
                  >
                    {docType.label}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Submit Button - Bottom Right */}
        <button
          onClick={handleSubmit}
          disabled={!input.trim() || state.loading}
          className={`absolute bottom-4 right-4 w-12 h-12 rounded-full flex items-center justify-center transition-all shadow cursor-pointer
              ${
                input.trim() && !state.loading
                  ? "bg-red-600 hover:bg-red-700 text-white"
                  : "bg-gray-200 text-gray-400 cursor-not-allowed"
              }
            `}
          aria-label="Send prompt"
        >
          <ArrowRight className="h-6 w-6" />
        </button>
      </div>

      <div className="mt-7 w-full">
        <h3 className="text-xs font-semibold text-gray-400 mb-2 uppercase">
          Examples
        </h3>
        <div className="space-y-2">
          {examplePrompts.map((ex, i) => (
            <button
              key={i}
              type="button"
              onClick={() => handleExampleClick(ex)}
              disabled={state.loading}
              className="block w-full text-left px-4 py-2 rounded-lg text-gray-600 bg-gray-50 hover:bg-gray-100 transition text-sm"
            >
              <span className="opacity-60">{ex}</span>
            </button>
          ))}
        </div>
      </div>

      <p className="mt-8 text-xs text-gray-400 text-center">
        <kbd className="bg-gray-100 px-1.5 py-0.5 rounded border text-xs">
          Ctrl
        </kbd>{" "}
        +{" "}
        <kbd className="bg-gray-100 px-1.5 py-0.5 rounded border text-xs">
          Enter
        </kbd>{" "}
        to send
      </p>
    </div>
  );
}
